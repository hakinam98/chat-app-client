import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useState, useEffect, useRef } from "react";
import Welcome from "./Welcome";
import { User } from "../interfaces";
import Contacts from "./Contact";
import { getAllUsers, host } from "../api";
import ChatContainer from "./ChatContainer";
import VideoCall from "./VideoCall";
import Peer from "peerjs";

interface ChatHomeProps {
  currentUser: User | undefined;
  accessToken: any;
  socket: any;
}

const ChatHome: React.FC<ChatHomeProps> = ({
  currentUser,
  accessToken,
  socket,
}) => {
  const [contacts, setContacts] = useState<User[]>([]);
  const [currentChat, setCurrentChat] = useState(undefined);
  const [isCall, setCall] = useState(false);
  const myVideoRef = useRef();
  const peerVideoRef = useRef();
  const peerInstance = useRef();
  const callRef = useRef();

  useEffect(() => {
    if (currentUser && socket) {
      const peer = new Peer({
        host: "localhost",
        port: 9000,
        path: "/peer",
      });

      peer.on("open", (id: string) => {
        console.log(id);

        socket.current.emit("peer-id", {
          peer_id: id,
          user_id: currentUser.id,
        });
      });

      peer.on("call", (call) => {
        callRef.current = call;
      });

      peerInstance.current = peer;
    }
  }, [currentUser, socket]);

  useEffect(() => {
    const getContacts = async () => {
      if (currentUser && accessToken) {
        const { data } = await getAllUsers(currentUser.id, accessToken);
        setContacts(data);
      }
    };
    getContacts();
  }, [currentUser, accessToken]);

  const handleChatChange = (chat: any) => {
    setCurrentChat(chat);
  };

  const handleAnswer = async (call: any) => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true,
      });
      myVideoRef.current.srcObject = stream;

      call.answer(stream);

      call.on("stream", (peerStream: any) => {
        peerVideoRef.current.srcObject = peerStream;
      });
    } catch (error) {
      console.log(error);
    }
  };
  return (
    <>
      <Head>
        <title>Chat App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={!isCall ? styles.container : styles.containerCall}>
          {!isCall ? (
            <Contacts
              contacts={contacts}
              currentUser={currentUser}
              changeChat={handleChatChange}
            />
          ) : (
            <VideoCall
              currentChat={currentChat}
              currentUser={currentUser}
              accessToken={accessToken}
              socket={socket}
              isCall={isCall}
              setCall={setCall}
              myVideoRef={myVideoRef}
              peerVideoRef={peerVideoRef}
            />
          )}
          {currentChat === undefined ? (
            <Welcome currentUsername={currentUser?.username || ""} />
          ) : (
            <ChatContainer
              currentChat={currentChat}
              currentUser={currentUser}
              accessToken={accessToken}
              socket={socket}
              setCall={setCall}
              peerInstance={peerInstance}
              myVideoRef={myVideoRef}
              peerVideoRef={peerVideoRef}
              handleAnswer={handleAnswer}
              callRef={callRef}
            />
          )}
        </div>
      </main>
    </>
  );
};

export default ChatHome;
