import { FormEvent, useState, useEffect, useRef } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { ToastOptions } from "react-toastify/dist/types";
import Image from "next/image";
import Link from "next/link";
import styles from "@/styles/VideoCall.module.css";
import Head from "next/head";
import { useRouter } from "next/router";
import { User } from "./interfaces";
import {
  BsCameraVideoFill,
  BsCameraVideoOffFill,
  BsFillMicFill,
  BsFillMicMuteFill,
  BsFillTelephoneXFill,
} from "react-icons/bs";

export default function VideoCall() {
  const [errorSetting, seterrorSetting] = useState("");
  const myVideoRef = useRef(); //Your video
  const peerVideoRef = useRef(); //The other users video
  const myStreamRef = useRef(); //Our video stream
  const [done, setdone] = useState(false);
  const [currentUser, setCurrentUser] = useState<User>();
  const [isVideo, setVideo] = useState(false);
  const [isMic, setMic] = useState(false);

  const router = useRouter();

  const toastOptions: ToastOptions = {
    position: "bottom-right",
    autoClose: 8000,
    pauseOnHover: true,
    draggable: true,
    theme: "dark",
  };

  useEffect(() => {
    const setUser = async () => {
      if (!localStorage.getItem("user")) {
        router.replace("/login");
      } else {
        setCurrentUser(await JSON.parse(localStorage.getItem("user")!));
      }
    };
    setUser();
  }, [router]);

  useEffect(() => {
    //Getting our Video and Audio
    if (isVideo) {
      if (isMic) {
        navigator.mediaDevices
          .getUserMedia({
            audio: true,
            video: true,
          })
          .then((stream) => {
            myStreamRef.current = stream;
            //Storing our video
            myVideoRef.current.srcObject = stream;
          })
          .catch((err) => {
            /* handle the error */
            console.log(err);
          });
      } else {
        navigator.mediaDevices
          .getUserMedia({
            audio: false,
            video: true,
          })
          .then((stream) => {
            myStreamRef.current = stream;
            //Storing our video
            myVideoRef.current.srcObject = stream;
          })
          .catch((err) => {
            /* handle the error */
            console.log(err);
          });
      }
    } else {
      if (isMic) {
        navigator.mediaDevices
          .getUserMedia({
            audio: true,
            video: false,
          })
          .then((stream) => {
            myStreamRef.current = stream;
            //Storing our video
            myVideoRef.current.srcObject = stream;
          })
          .catch((err) => {
            /* handle the error */
            console.log(err);
          });
      } else {
        navigator.mediaDevices
          .getUserMedia({
            audio: false,
            video: false,
          })
          .then((stream) => {
            myStreamRef.current = stream;
            //Storing our video
            myVideoRef.current.srcObject = stream;
          })
          .catch((err) => {
            /* handle the error */
            console.log(err);
          });
      }
    }
  }, [isVideo, isMic]);
  return (
    <>
      <Head>
        <title>Video Call</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.videoContainer}>
          <h2>Peer</h2>
          <video
            autoPlay
            ref={peerVideoRef}
            playsInline
            width={"70%"}
            // height={"100%"}
          />
          <div className={styles.videoContainerCurrent}>
            {isVideo ? (
              <>
                <h2>{currentUser?.username}</h2>
                <video
                  autoPlay
                  ref={myVideoRef}
                  muted
                  playsInline
                  width={"250px"}
                />
              </>
            ) : (
              <div className={styles.image}>
                <Image
                  className={styles.image}
                  src="/DefaultAvatar.png"
                  width={100}
                  height={100}
                  alt="avatar"
                  priority
                />
                <h3>{currentUser?.username}</h3>
              </div>
            )}
          </div>
        </div>
        <div className={styles.buttonContainer}>
          <div className={styles.emoji}>
            {isVideo === false ? (
              <BsCameraVideoOffFill
                className={styles.svg1}
                onClick={() => setVideo(true)}
              />
            ) : (
              <BsCameraVideoFill
                className={styles.svg1}
                onClick={() => setVideo(false)}
              />
            )}
            <h5>Camera</h5>
          </div>
          <div className={styles.emoji}>
            {isMic === false ? (
              <BsFillMicMuteFill
                className={styles.svg2}
                onClick={() => setMic(true)}
              />
            ) : (
              <BsFillMicFill
                className={styles.svg2}
                onClick={() => setMic(false)}
              />
            )}
            <h5>Camera</h5>
          </div>
          <div className={styles.emoji}>
            <BsFillTelephoneXFill className={styles.svg3} />
            <h5>Camera</h5>
          </div>
        </div>
      </main>
      <ToastContainer />
    </>
  );
}
